#!/usr/bin/env python
from misc.utility.scons_hints import *
from custom.utils import *

Import("env")

import os

import core_builders

import methods

env.core_sources = []


# Add required thirdparty code.
log_info("build core")

thirdparty_obj = []

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()

thirdparty_misc_dir = "#thirdparty/build/misc/"
thirdparty_misc_include_dir = "#thirdparty/misc/"

env.Prepend(CPPPATH=[thirdparty_misc_include_dir])
env.Append(LIBPATH=[thirdparty_misc_dir])
env.Append(LINKFLAGS=["misc.lib"])



if env["brotli"] and env["builtin_brotli"]:

    brotli_lib_path = "#thirdparty/build/brotli/"
    brotli_include_path = "#thirdparty/brotli/include/"

    # 加入头文件路径
    env.Prepend(CPPPATH=[brotli_include_path])
    brotli_lib = os.path.join(brotli_lib_path, "brotli.lib")
    # 添加Brotli库到链接中
    env.Append(LINKFLAGS=[env.File(brotli_lib).abspath])

if env["builtin_clipper2"]:
    thirdparty_clipper_lib_dir = "#thirdparty/build/clipper2/"
    thirdparty_clipper_include_dir = "#thirdparty/clipper2/include"

    env.Prepend(CPPPATH=[thirdparty_clipper_include_dir])
    env.Append(LIBPATH=[thirdparty_clipper_lib_dir])
    env.Append(LINKFLAGS=["clipper2.lib"])

    # 推荐显式定义宏（虽然CMake已经定义了）
    env.Append(CPPDEFINES=["CLIPPER2_ENABLED"])
    log_info("CLIPPER2_ENABLED")

# Zlib library, built via CMake
if env["builtin_zlib"]:
    log_info("builtin_zlib (CMake build)")
    thirdparty_zlib_dir = "#thirdparty/zlib/"
    thirdparty_zlib_build_dir =  "#thirdparty/build/zlib/"
    env.Prepend(CPPPATH=[thirdparty_zlib_dir])
    env.Append(LIBPATH=[thirdparty_zlib_build_dir])
    env.Append(LINKFLAGS=["zlib.lib"])

    if env.dev_build:
        log_info("ZLIB_DEBUG")
        env.Append(CPPDEFINES=["ZLIB_DEBUG"])

# Minizip library, built via CMake
thirdparty_minizip_dir = "#thirdparty/minizip/"
thirdparty_minizip_build_dir =  "#thirdparty/build/minizip/"
env.Prepend(CPPPATH=[thirdparty_minizip_dir])
env.Append(LIBPATH=[thirdparty_minizip_build_dir])
env.Append(LINKFLAGS=["minizip.lib"])


if env["builtin_zstd"]:
    thirdparty_zstd_dir = "#thirdparty/zstd/"
    thirdparty_zstd_build_dir = "#thirdparty/build/zstd/"
    env.Prepend(CPPPATH=[thirdparty_zstd_dir, thirdparty_zstd_dir + "common"])
    env.Append(CPPDEFINES=["ZSTD_STATIC_LINKING_ONLY"])
    env.Append(LIBPATH=[thirdparty_zstd_build_dir])
    env.Append(LINKFLAGS=["zstd.lib"])

    log_info("Using Zstd library built via CMake (static linking).")

env.core_sources += thirdparty_obj


# Godot source files

env.add_source_files(env.core_sources, "*.cpp")
env.add_source_files(env.core_sources, "version_hash.gen.cpp")
env.add_source_files(env.core_sources, "script_encryption_key.gen.cpp")

# crypto/SCsub 模块
env.Prepend(CPPPATH=["#thirdparty/mbedtls/include"])
config_path = "thirdparty/mbedtls/include/godot_module_mbedtls_config.h"
config_path = f"<{config_path}>" if env["ninja"] and env.msvc else f'\\"{config_path}\\"'
env.Append(CPPDEFINES=[("MBEDTLS_CONFIG_FILE", config_path)])
log_info("MBEDTLS_CONFIG_FILE")
# Needed to force rebuilding the core files when the configuration file is updated.
thirdparty_obj = ["#thirdparty/mbedtls/include/godot_module_mbedtls_config.h"]

# Chain load SCsubs
SConscript("os/SCsub")
SConscript("math/SCsub")
SConscript("crypto/SCsub")
SConscript("io/SCsub")
SConscript("debugger/SCsub")
SConscript("input/SCsub")
SConscript("variant/SCsub")
SConscript("extension/SCsub")
SConscript("object/SCsub")
SConscript("templates/SCsub")
SConscript("string/SCsub")
SConscript("config/SCsub")
SConscript("error/SCsub")
SConscript("mediator/SCsub")

# Build it all as a library
lib = env.add_library("core", env.core_sources)
env.Prepend(LIBS=[lib])

# Needed to force rebuilding the core files when the thirdparty code is updated.
env.Depends(lib, thirdparty_obj)
